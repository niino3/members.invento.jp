rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
    // サービスログの画像ファイル
    match /service-logs/{logId}/{imageFile} {
      // 管理者は全ての画像を操作可能
      allow read, write: if request.auth != null && isAdmin();
      
      // 顧客は自分のログの画像のみ閲覧可能（Firestoreのログが公開ステータスの場合のみ）
      allow read: if request.auth != null && 
                     isCustomerOwnerOfLog(logId);
    }
    
    // その他のファイル（今後追加される可能性）
    match /{allPaths=**} {
      allow read, write: if request.auth != null && isAdmin();
    }
    
    // 管理者かどうかを判定
    function isAdmin() {
      return request.auth != null &&
             firestore.exists(/databases/(default)/documents/users/$(request.auth.uid)) &&
             firestore.get(/databases/(default)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // 顧客がログの所有者かどうかを判定
    function isCustomerOwnerOfLog(logId) {
      let logDoc = firestore.get(/databases/(default)/documents/serviceLogs/$(logId));
      let userDoc = firestore.get(/databases/(default)/documents/users/$(request.auth.uid));
      
      return request.auth != null &&
             logDoc.data.customerId == userDoc.data.customerId &&
             logDoc.data.status == 'published';
    }
  }
}